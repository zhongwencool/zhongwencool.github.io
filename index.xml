<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>🪴 札记 on</title><link>https://zhongwencool.github.io/</link><description>Recent content in 🪴 札记 on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://zhongwencool.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Pull Request 入门</title><link>https://zhongwencool.github.io/notes/github-pull-request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zhongwencool.github.io/notes/github-pull-request/</guid><description>编程的乐趣是什么？ 人的成就感来源于两样东西，创造与毁灭。
没有什么能比用一个伟大的 Pull Request(PR) 展示自己炉火纯青的编码功力，更让人着迷。本文将详细介绍创建 Pull Request 时应该要掌握的知识。
文未的 实战环节，会一步步指引你提交PR把自己的名字署在文末，快来完成自己的第一个 PR 吧~
如何挑选项目(Finding) 有部分人会止步于找不到适合自己的项目，而迟迟不动手。其实多关注平时项目使用的第三方库，就可能会发现测试/文档还可以更完善，更进一步还可以为它改进/增添新功能。这些可以把你从围观者逐渐变成一个推动者。当然，参与开源项目应该是一个完全自然且合乎逻辑的过程，发现一个认为能它变得更好的地方，优化它。如果你从来不使用其他人的项目，可能你才刚开始编程，继续练习，将来一定会尝试使用更多开源项目的。
先问(Asking) 当你为项目找到一个非常值得添加的功能时，不要迫不及待地把代码 clone 下来，然后一顿操作后，发起 PR。可能别人也想到(或者更好的方案)，并且已经在为之努力，又或者维护者有不想加入这个特性的其它考虑。所以为了保证自己不白费心劳力，可以在已有的 issues 中找找相关内容的讨论。如果没有，可以新建 issue 来讨论这个需求，提问的过程也可以帮助自己理清思路。</description></item><item><title>Git撤消概括</title><link>https://zhongwencool.github.io/notes/git-undo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zhongwencool.github.io/notes/git-undo/</guid><description>I.Git撤消之谜 Stackoverflow按投票(votes)排序搜索git，前15+的问题全部都是一个主题：求解各式各样的撤消。Github也早在2015年就贴心地把git常见撤消分类总结成简单易懂的情景再现: How to undo(almost) anything with git。可见初学者对git撤消是有很多疑惑点。不过，不论是Stackoverflow还是Github都侧重针对具体问题/场景提出纠正流程，虽然受益良多，但是总感觉太零碎，没能连成系统，于是就有了这篇总结。
II.Git工作区/暂存区/版本库 工作区(work space)：就是你可以直接查看和编辑的文件目录。 暂存区(index)：是单个大型二进制文件(.git/index)，它描述了当前分支上所有的文件的sha1校验/时间戳/文件名。它并不是一个别一个类似工作区的副本。 版本库(repository)：它隐藏于*.git/objects*下，包涵了每一个文件(本地和远程)的所有版本。 所以：不要将上图中表示的4个磁盘视为repo文件的单独副本。
从上图的流程可以看出，撤消无非就是分成四大类：
撤消工作区改动。 撤消暂存区改动。 撤消本地版本库改动。 撤消远程版本库改动。 III.</description></item><item><title>Linux负载</title><link>https://zhongwencool.github.io/notes/load_average/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zhongwencool.github.io/notes/load_average/</guid><description>通过top或uptime都可以查看到操作系统的CPU的1分钟/5分钟/15分钟的负载情况。
1 2 uptime 22:08:52 up 171 days, 12:03, 1 user, load average: 0.00, 0.01, 0.05 CPU load average的平均值是如何被计算出来的？</description></item><item><title>卡片笔记写作法</title><link>https://zhongwencool.github.io/notes/%E5%8D%A1%E7%89%87%E7%AC%94%E8%AE%B0%E5%86%99%E4%BD%9C%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zhongwencool.github.io/notes/%E5%8D%A1%E7%89%87%E7%AC%94%E8%AE%B0%E5%86%99%E4%BD%9C%E6%B3%95/</guid><description>为什么提出一个 [好问题]这么困难？ 好问题背后是前人没有想过的角度，是一个洞见。产生洞见实际是一个不断反复，不断迭代的过程。
写作的困难在于，我们的大脑是一个自下而上的系统，但是用传统自上而下的笔记方法来分类，很难帮助大脑进行复杂的思考和写作。 大脑没有预设笔记是用来做什么分类的。但是笔记分类时，会把他固化为一个角度。无法使用多个角度来分析他。这是笔记不好找，且无法激发灵感的矛盾点。
卡片笔记盒子，我们不擅长于管理零星的启发。以至于有些人认为碎片华阅读，会让人变得浅薄，缺乏思考。但是碎片化输入本身并不是一个问题，最直观的例子就是：大多数人的母语都是依靠碎片化输入慢慢习得的。而不是靠系统学习语法。问题在于我们缺乏管理和融合碎片化信息的手段。
每张卡片只写一个关键点，表达一个意思。如果需要进一步的思考，再在后面链接新的卡片。
我们的某个想法可能转瞬即逝，但是在卡片盒子里的思考永远不会忘记。思考的成果是可以不断累积的。用的卡片盒子越久，里面盛开的想法就越多。我们思考结果的质量就也越高。同时因为里面信息彼此之间的差异极大在，所以很多之前完全无法的想法。可能突然就产生了链接，变成了意想不到的奇思妙想。
金融领域的复利效应在卡片笔记法中也成立。每次记录的卡片都可能推动下一次的思考。卡片越多，就越容易产生新的想法和思考。卢曼教授出版了58本学术著作，数百篇论文，积累了9万张卡片。但他平均到每天的需要写的卡片只有6张。</description></item><item><title>读书笔记</title><link>https://zhongwencool.github.io/notes/books/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zhongwencool.github.io/notes/books/</guid><description> 卡片笔记写作法 如何通过卡片的高效收集，整理以及内化信息，从号产生高质量的洞见。是自己开始使用obsidian和flomo来实践卡片笔记的起始源头。</description></item></channel></rss>