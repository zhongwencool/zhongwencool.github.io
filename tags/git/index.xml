<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on</title><link>https://zhongwencool.github.io/tags/git/</link><description>Recent content in git on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://zhongwencool.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Pull Request 入门</title><link>https://zhongwencool.github.io/writes/github-pull-request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zhongwencool.github.io/writes/github-pull-request/</guid><description>编程的乐趣是什么？ 人的成就感来源于两样东西，创造与毁灭。
没有什么能比用一个伟大的 Pull Request(PR) 展示自己炉火纯青的编码功力，更让人着迷。本文将详细介绍创建 Pull Request 时应该要掌握的知识。
文未的 实战环节，会一步步指引你提交PR把自己的名字署在文末，快来完成自己的第一个 PR 吧~
如何挑选项目(Finding) 有部分人会止步于找不到适合自己的项目，而迟迟不动手。其实多关注平时项目使用的第三方库，就可能会发现测试/文档还可以更完善，更进一步还可以为它改进/增添新功能。这些可以把你从围观者逐渐变成一个推动者。当然，参与开源项目应该是一个完全自然且合乎逻辑的过程，发现一个认为能它变得更好的地方，优化它。如果你从来不使用其他人的项目，可能你才刚开始编程，继续练习，将来一定会尝试使用更多开源项目的。
先问(Asking) 当你为项目找到一个非常值得添加的功能时，不要迫不及待地把代码 clone 下来，然后一顿操作后，发起 PR。可能别人也想到(或者更好的方案)，并且已经在为之努力，又或者维护者有不想加入这个特性的其它考虑。所以为了保证自己不白费心劳力，可以在已有的 issues 中找找相关内容的讨论。如果没有，可以新建 issue 来讨论这个需求，提问的过程也可以帮助自己理清思路。</description></item><item><title>Git撤消概括</title><link>https://zhongwencool.github.io/writes/git-undo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zhongwencool.github.io/writes/git-undo/</guid><description>I.Git撤消之谜 Stackoverflow按投票(votes)排序搜索git，前15+的问题全部都是一个主题：求解各式各样的撤消。Github也早在2015年就贴心地把git常见撤消分类总结成简单易懂的情景再现: How to undo(almost) anything with git。可见初学者对git撤消是有很多疑惑点。不过，不论是Stackoverflow还是Github都侧重针对具体问题/场景提出纠正流程，虽然受益良多，但是总感觉太零碎，没能连成系统，于是就有了这篇总结。
II.Git工作区/暂存区/版本库 工作区(work space)：就是你可以直接查看和编辑的文件目录。 暂存区(index)：是单个大型二进制文件(.git/index)，它描述了当前分支上所有的文件的sha1校验/时间戳/文件名。它并不是一个别一个类似工作区的副本。 版本库(repository)：它隐藏于*.git/objects*下，包涵了每一个文件(本地和远程)的所有版本。 所以：不要将上图中表示的4个磁盘视为repo文件的单独副本。
从上图的流程可以看出，撤消无非就是分成四大类：
撤消工作区改动。 撤消暂存区改动。 撤消本地版本库改动。 撤消远程版本库改动。 III.</description></item></channel></rss>